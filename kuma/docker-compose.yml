services:
  control-plane:
    build:
      context: .
      dockerfile: Dockerfile.control-plane
    container_name: kuma-control-plane
    ports:
      - "5681:5681"  # Admin API
    volumes:
      - ./tokens:/tokens
      - ./control_plane:/control_plane
      - ./certs:/certs
    environment:
      - KUMA_GENERAL_TLS_CERT_FILE=/certs/server.crt
      - KUMA_GENERAL_TLS_KEY_FILE=/certs/server.key
 
    networks:
      kuma-network:
        ipv4_address: 192.168.0.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5681/"]
      interval: 10s
      timeout: 5s
      retries: 5


      
  # Init Container with shell support
  init:
    build:
      context: .
      dockerfile: init.Dockerfile
    depends_on:
      control-plane:
        condition: service_healthy
    networks:
      - kuma-network
    volumes:
      - ./tokens:/tokens
      - ./kuma:/kuma
      - ./init.sh:/init.sh
    command: /init.sh

  # User Service Database
  user-service-db:
    image: postgres:15
    hostname: user-service-db
    networks:
      kuma-network:
        ipv4_address: 192.168.0.13
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=myuser
    volumes:
      - ./kuma:/kuma
      - user_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "myuser"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      init:
        condition: service_completed_successfully

  # User Service
  user-service:
    image: user-service-img
    build:
      context: ../user-service
      dockerfile: Dockerfile
    hostname: user-service
    networks:
      kuma-network:
        ipv4_address: 192.168.0.3
    environment:
      - DATABASE_URL=postgresql://myuser:mypassword@user-service-db:5432/myuser
    volumes:
      - ./kuma:/kuma
    depends_on:
      user-service-db:
        condition: service_healthy



  # User Service Dataplane
  user-service-dp:
    image: kumahq/kuma-dp:2.10.1
    networks:
      - kuma-network
    volumes:
      - ./kuma:/kuma
      - ./tokens:/tokens
      - ./certs:/certs
    command: >
      run
      --cp-address https://control-plane:5678
      --ca-cert-file /certs/server.crt
      --dataplane-token-file /tokens/token-user-service
      --dataplane-file /kuma/dataplane.yaml
      --dataplane-var name=user-service
      --dataplane-var address=192.168.0.3
      --dataplane-var port=8001
    depends_on:
      - user-service
      - init
    cap_add:
      - NET_ADMIN

  # User DB Dataplane
  user-service-db-dp:
    image: kumahq/kuma-dp:2.10.1
    networks:
      - kuma-network
    volumes:
      - ./kuma:/kuma
      - ./tokens:/tokens
      - ./certs:/certs
    command: >
      run
      --cp-address https://control-plane:5678
      --ca-cert-file /certs/server.crt
      --dataplane-token-file /tokens/token-user-service-db
      --dataplane-file /kuma/dataplane.yaml
      --dataplane-var name=user-service-db
      --dataplane-var address=192.168.0.13
      --dataplane-var port=5432
    depends_on:
      - user-service-db
      - init
    cap_add:
      - NET_ADMIN

  # Kong Database
  kong-db:
    image: postgres:13
    hostname: kong-db
    networks:
      kuma-network:
        ipv4_address: 192.168.0.12
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong
      - POSTGRES_DB=kong
    volumes:
      - kong_db_data:/var/lib/postgresql/data
      - ./kuma:/kuma
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      init:
        condition: service_completed_successfully

  # Kong Migration
  kong-migration:
    image: kong:latest
    networks:
      - kuma-network
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_DATABASE=kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    command: "kong migrations bootstrap"
    depends_on:
      kong-db:
        condition: service_healthy

  # Kong API Gateway
  kong:
    image: kong:latest
    hostname: kong
    networks:
      kuma-network:
        ipv4_address: 192.168.0.2
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_DATABASE=kong
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
    volumes:
      - ./kuma:/kuma
      - ./kong/kong.conf:/etc/kong/kong.conf
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Dataplane
  kong-dp:
    image: kumahq/kuma-dp:2.10.1
    networks:
      - kuma-network
    volumes:
      - ./kuma:/kuma
      - ./tokens:/tokens
      - ./kong/kong-dp.yaml:/kong/kong-dp.yaml
      - ./certs:/certs
    command: >
      run
      --cp-address https://control-plane:5678
      --ca-cert-file /certs/server.crt
      --dataplane-token-file /tokens/token-kong
      --dataplane-file /kong/kong-dp.yaml
      --dataplane-var name=kong
      --dataplane-var address=192.168.0.2
      --dataplane-var port=8000
    depends_on:
      - kong
      - init
    cap_add:
      - NET_ADMIN

  # Kong DB Dataplane
  kong-db-dp:
    image: kumahq/kuma-dp:2.10.1
    networks:
      - kuma-network
    volumes:
      - ./kuma:/kuma
      - ./tokens:/tokens
      - ./certs:/certs
    command: >
      run
      --cp-address https://control-plane:5678
      --ca-cert-file /certs/server.crt
      --dataplane-token-file /tokens/token-kong-db
      --dataplane-file /kuma/dataplane.yaml
      --dataplane-var name=kong-db
      --dataplane-var address=192.168.0.12
      --dataplane-var port=5432
    depends_on:
      - kong-db
      - init
    cap_add:
      - NET_ADMIN

  # Kong configuration
  kong-config:
    image: curlimages/curl:latest
    networks:
      - kuma-network
    depends_on:
      kong:
        condition: service_healthy
    command: >
      sh -c "
        curl -i -X POST http://kong:8001/services --data 'name=kuma' --data 'url=http://control-plane:5681' &&
        curl -i -X POST http://kong:8001/services/kuma/routes --data 'strip_path=false' --data 'paths[]=/mesh-insights' --data 'paths[]=/global-insight' --data 'paths[]=/gui' --data 'paths[]=/meshes' --data 'paths[]=/dataplanes' --data 'paths[]=/status' --data 'paths[]=/policies' --data 'paths[]=/zones' &&
      
        curl -i -X POST http://kong:8001/services --data 'name=user-service' --data 'url=http://user-service:8001' &&
        curl -i -X POST http://kong:8001/services/user-service/routes \
          --data "paths[]=/users" \
          --data "methods[]=GET" \
          --data "methods[]=POST" \
          --data "methods[]=PUT" \
          --data "methods[]=DELETE" \
          --data "methods[]=OPTIONS" \
          --data "methods[]=PATCH" &&

        curl -i -X POST http://kong:8001/services --data 'name=user-service' --data 'url=http://user-service:8001' &&
        curl -i -X POST http://kong:8001/services/user-service/routes --data 'strip_path=false' --data 'paths[]=/users' --data 'methods[]=GET' --data 'methods[]=POST' --data 'methods[]=PUT' --data 'methods[]=DELETE' --data 'methods[]=OPTIONS' --data 'methods[]=PATCH'
      "

  # User Service Transparent Proxy Setup
  user-service-tp-setup:
    image: kumahq/kumactl:2.10.1
    network_mode: "service:user-service"
    depends_on:
      - user-service
    volumes:
      - ./kuma:/kuma
    command: >
      sh -c "
        kumactl install transparent-proxy \
        --config-file /kuma/config-transparent-proxy.yaml
      "
    cap_add:
      - NET_ADMIN

  # Kong Transparent Proxy Setup# User Service DB Transparent Proxy Setup
  user-service-db-tp-setup:
    image: kumahq/kumactl:2.10.1
    network_mode: "service:user-service-db"
    depends_on:
      - user-service-db
    volumes:
      - ./kuma:/kuma
    command: >
      sh -c "
        kumactl install transparent-proxy \
        --config-file /kuma/config-transparent-proxy.yaml
      "
    cap_add:
      - NET_ADMIN

  # Kong DB Transparent Proxy Setup
  kong-db-tp-setup:
    image: kumahq/kumactl:2.10.1
    network_mode: "service:kong-db"
    depends_on:
      - kong-db
    volumes:
      - ./kuma:/kuma
    command: >
      sh -c "
        kumactl install transparent-proxy \
        --config-file /kuma/config-transparent-proxy.yaml
      "
    cap_add:
      - NET_ADMIN

networks:
  kuma-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.254
          ip_range: 192.168.0.96/28  # Limits auto assignments to 192.168.0.100-115

volumes:
  user_db_data:
  kong_db_data: